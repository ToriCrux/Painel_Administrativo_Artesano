-- ---------- Usuário e Role ----------

CREATE TABLE tb_usuario (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome             VARCHAR(120) NOT NULL,
  email            VARCHAR(160) NOT NULL UNIQUE,
  password_hash    VARCHAR(255) NOT NULL,
  ativo            BOOLEAN NOT NULL DEFAULT TRUE,
  criado_em        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  atualizado_em    TIMESTAMP
);

CREATE TABLE tb_role (
  id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE tb_usuario_role (
  usuario_id BIGINT NOT NULL REFERENCES tb_usuario(id) ON DELETE CASCADE,
  role_id    BIGINT NOT NULL REFERENCES tb_role(id) ON DELETE CASCADE,
  PRIMARY KEY (usuario_id, role_id)
);

CREATE TABLE tb_produto (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sku              VARCHAR(50)  NOT NULL UNIQUE,
  nome             VARCHAR(120) NOT NULL,
  categoria        VARCHAR(80),
  medidas          VARCHAR(80),
  cores            VARCHAR(120),
  preco_unitario   NUMERIC(12,2) NOT NULL,
  ativo            BOOLEAN NOT NULL DEFAULT TRUE,
  criado_em        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  atualizado_em    TIMESTAMP,
  version          INT NOT NULL DEFAULT 0
);

CREATE TABLE tb_estoque (
  produto_id        BIGINT PRIMARY KEY REFERENCES tb_produto(id) ON DELETE CASCADE,
  quantidade_atual  INT NOT NULL DEFAULT 0,
  minimo            INT,
  atualizado_em     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  version           INT NOT NULL DEFAULT 0
);

-- Obs.: enums tratados como VARCHAR para compatibilidade H2/Postgres
CREATE TABLE tb_movimentacao_estoque (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  produto_id       BIGINT NOT NULL REFERENCES tb_produto(id),
  tipo             VARCHAR(10)  NOT NULL,   -- 'ENTRADA' | 'SAIDA'
  origem           VARCHAR(15)  NOT NULL,   -- 'AJUSTE' | 'PEDIDO' | 'DEVOLUCAO'
  ref_tipo         VARCHAR(20),             -- ex.: 'PEDIDO', 'PROPOSTA'
  ref_id           BIGINT,                  -- id do pedido/proposta/ajuste que originou
  quantidade       INT NOT NULL CHECK (quantidade > 0),
  saldo_anterior   INT,
  saldo_posterior  INT,
  id_usuario       BIGINT,                  -- opcional, quem realizou
  ocorrido_em      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- ---------- Índices úteis ----------
CREATE INDEX idx_usuario_email           ON tb_usuario(email);
CREATE INDEX idx_produto_sku             ON tb_produto(sku);
CREATE INDEX idx_movestoque_prod_data    ON tb_movimentacao_estoque(produto_id, ocorrido_em);



